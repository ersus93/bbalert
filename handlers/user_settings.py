# handlers/user_settings.py


import asyncio
import os
import uuid
import openpyxl 
from datetime import datetime
from telegram import Update
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.ext import ConversationHandler, ContextTypes
from telegram.ext import ConversationHandler, CallbackQueryHandler
from telegram.constants import ParseMode
# importaciones de utilidades y configuraci√≥n
from core.config import TOKEN_TELEGRAM, ADMIN_CHAT_IDS, PID, VERSION, STATE, PYTHON_VERSION, LOG_LINES, USUARIOS_PATH
from utils.file_manager import(cargar_usuarios, guardar_usuarios, registrar_usuario,\
                               actualizar_monedas, obtener_monedas_usuario, actualizar_intervalo_alerta, add_log_line,\
                                add_price_alert, get_user_alerts, delete_price_alert,delete_all_alerts,\
                                      toggle_hbd_alert_status, set_user_language, get_user_language
                                ) 
from core.api_client import obtener_precios_control
from core.loops import set_custom_alert_history_util # Nueva importaci√≥n
from core.config import ADMIN_CHAT_IDS

from core.i18n import _ # <-- AGREGAR LA FUNCI√ìN DE TRADUCCI√ìN

# Soporte de idiomas
SUPPORTED_LANGUAGES = {
    'es': 'üá™üá∏ Espa√±ol',
    'en': 'üá¨üáß English',
    'pt': 'üáßüá∑ Portugu√™s',
    # Agrega m√°s aqu√≠ cuando tengas los archivos .po/.mo
}

# ... (set_admin_util y set_logs_util) ...
_reprogramar_alerta_ref = None

def set_reprogramar_alerta_util(func):
    """Permite a bbalert inyectar la funci√≥n de reprogramaci√≥n de alerta."""
    global _reprogramar_alerta_ref
    _reprogramar_alerta_ref = func

# manejar texto para actualizar la lista de monedas
async def manejar_texto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja el texto plano (lista de monedas) para actualizar la configuraci√≥n."""
    texto = update.message.text.upper().strip()
    chat_id = update.effective_chat.id # Obtener el ID para la traducci√≥n
    user_id = update.effective_user.id

    # Intenta parsear la lista de monedas
    monedas_limpias = [m.strip() for m in texto.split(',') if m.strip()]
    
    if monedas_limpias:
        actualizar_monedas(chat_id, monedas_limpias)
        
        # Mensaje 1 (√âxito) - Requiere formateo
        mensaje_base = _(
            "‚úÖ ¬°Lista de monedas actualizada!\n"
            "Ahora recibir√°s alertas de para: `{monedas_limpias_str}`\n\n"
            "Puedes cambiar esta lista en cualquier momento enviando una nueva lista de s√≠mbolos separados por comas.",
             user_id
        )
        mensaje = mensaje_base.format(monedas_limpias_str=', '.join(monedas_limpias))
    else:
        # Mensaje 2 (Advertencia/Error)
        mensaje = _(
            "‚ö†Ô∏è Por favor, env√≠a una lista de s√≠mbolos de monedas separados por comas. Ejemplo: `BTC, ETH, HIVE`",
            user_id
        )
        
    await update.message.reply_text(mensaje, parse_mode=ParseMode.MARKDOWN)


async def mismonedas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /mismonedas. Muestra las monedas que sigue el usuario."""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    monedas = obtener_monedas_usuario(chat_id)
    
    if monedas:
        # Mensaje 1: √âxito (requiere formateo)
        mensaje_base = _(
            "‚úÖ Listo! recibir√°s alertas para las siguientes monedas:\n`{monedas_str}`.",
            user_id
        )
        mensaje = mensaje_base.format(monedas_str=', '.join(monedas))
    else:
        # Mensaje 2: Advertencia
        mensaje = _(
            "‚ö†Ô∏è No tienes monedas configuradas para la alerta de tempralidad.",
            user_id
        )
        
    await update.message.reply_text(mensaje, parse_mode=ParseMode.MARKDOWN)


async def parar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Comando /parar. Elimina las monedas del usuario para detener alertas de control."""
    chat_id = update.effective_chat.id
    actualizar_monedas(chat_id, [])
    
    mensaje = _(
        "üõë Alertas detenidas. Ya no recibir√°s mensajes cada hora (a menos que vuelvas a configurar tu lista o ajustes la temporalidad).",
        chat_id
    )
    
    await update.message.reply_text(mensaje, parse_mode=ParseMode.MARKDOWN)


# üí° COMANDO /temp ajustes de temporalidad de notificacion de lista
async def cmd_temp(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Permite al usuario configurar la temporalidad de sus alertas."""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    user_input = context.args[0] if context.args else None
    
    if not user_input:
        # Mostrar configuraci√≥n actual
        usuarios = cargar_usuarios()
        intervalo_actual = usuarios.get(str(chat_id), {}).get('intervalo_alerta_h', 1.0)
        
        # Mensaje 1: Configuraci√≥n actual (requiere formateo)
        mensaje_base = _(
            "‚öôÔ∏è *Configuraci√≥n de Temporalidad*\n"
            "Tu intervalo de alerta actual es de *{intervalo_actual} horas*.\n\n"
            "Para cambiarlo, env√≠a el comando con las horas deseadas (desde 1h hasta 12h).\n"
            "Ejemplo: `/temp 2.5` (para 2 horas y 30 minutos).",
            user_id
        )
        mensaje = mensaje_base.format(intervalo_actual=intervalo_actual)
        await update.message.reply_text(mensaje, parse_mode=ParseMode.MARKDOWN)
        return

    try:
        interval_h = float(user_input)
        
        # Validar el rango de horas (0.5h a 24.0h)
        if not (0.02 <= interval_h <= 24.0):
            # Mensaje 2: Rango inv√°lido
            mensaje_rango_invalido = _("‚ö†Ô∏è El valor debe ser un n√∫mero entre *0.5* (30min) y *24.0* horas. Ejemplo: `2.5`", chat_id)
            await update.message.reply_text(mensaje_rango_invalido, parse_mode=ParseMode.MARKDOWN)
            return

        # 1. Guardar el nuevo intervalo
        if not actualizar_intervalo_alerta(chat_id, interval_h):
            # Mensaje 3: Error al guardar
            mensaje_error_guardar = _("‚ùå No se pudo guardar tu configuraci√≥n. ¬øEst√°s registrado con /start?", chat_id)
            await update.message.reply_text(mensaje_error_guardar, parse_mode=ParseMode.MARKDOWN)
            return
            
        # 2. Reprogramar la alerta (usando la funci√≥n inyectada)
        if _reprogramar_alerta_ref:
            # Mensaje 4: √âxito con reprogramaci√≥n (requiere formateo)
            _reprogramar_alerta_ref(chat_id, interval_h)
            mensaje_base_final = _(
                "‚úÖ ¬°Temporalidad de alerta actualizada a *{interval_h} horas*!\n"
                "La alerta con tus monedas ha sido *reprogramada* para ejecutarse cada {interval_h} horas.",
                user_id
            )
            mensaje_final = mensaje_base_final.format(interval_h=interval_h)
        else:
            # Mensaje 5: √âxito sin reprogramaci√≥n (requiere formateo)
            mensaje_base_final = _(
                "‚úÖ ¬°Temporalidad de alerta actualizada a *{interval_h} horas*!\n"
                "‚ö†Ô∏è Pero hubo un error al reprogramar la alerta. Intenta enviar /temp nuevamente.",
                user_id
            )
            mensaje_final = mensaje_base_final.format(interval_h=interval_h)

        await update.message.reply_text(mensaje_final, parse_mode=ParseMode.MARKDOWN)

    except ValueError:
        # Mensaje 6: Formato de hora inv√°lido
        mensaje_error_valor = _("‚ö†Ô∏è Formato de hora inv√°lido. Usa un n√∫mero como `2` o `2.5` (minimo 0.5)(m√°ximo 24.0).", user_id)
        await update.message.reply_text(mensaje_error_valor, parse_mode=ParseMode.MARKDOWN)
    except IndexError:
        # Mensaje 7: Falta el argumento
        mensaje_error_indice = _("‚ö†Ô∏è Debes especificar el n√∫mero de horas. Ejemplo: `/temp 2.5`", user_id)
        await update.message.reply_text(mensaje_error_indice, parse_mode=ParseMode.MARKDOWN)

# === L√ìGICA DE JOBQUEUE PARA ALERTAS DE TEMPORALIDAD ===
async def set_monedas_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Comando /monedas. Permite al usuario establecer su lista de monedas.
    Ejemplo: /monedas BTC, ETH, HIVE
    """
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if not context.args:
        # Si el usuario solo env√≠a /monedas, le mostramos c√≥mo usarlo
        monedas_actuales = obtener_monedas_usuario(user_id)
        lista_str = '`' + ', '.join(monedas_actuales) + '`' if monedas_actuales else _("ninguna", user_id)
        
        # Mensaje 1: Formato incorrecto (requiere formateo para la lista actual)
        mensaje_base = _(
            "‚ö†Ô∏è *Formato incorrecto*.\n\n"
            "Para establecer tu lista de monedas, env√≠a el comando seguido de los s√≠mbolos. Ejemplo:\n\n"
            "`/monedas BTC, ETH, HIVE, SOL`\n\n"
            "Tu lista actual es: {lista_str}",
            user_id
        )
        mensaje = mensaje_base.format(lista_str=lista_str)
        await update.message.reply_text(mensaje, parse_mode=ParseMode.MARKDOWN)
        return

    # 1. Unir todos los argumentos en un solo string
    texto_recibido = ' '.join(context.args)
    
    # 2. Limpiar y procesar la entrada del usuario
    monedas = [m.strip().upper() for m in texto_recibido.split(',') if m.strip()]

    if not monedas:
        # Mensaje 2: No se encontraron monedas
        mensaje_error_vacio = _("‚ö†Ô∏è No pude encontrar ninguna moneda en tu mensaje. Intenta de nuevo.", user_id)
        await update.message.reply_text(mensaje_error_vacio, parse_mode=ParseMode.MARKDOWN)
        return

    # 3. Guardar la nueva lista de monedas
    actualizar_monedas(chat_id, monedas)
    
    # 4. Obtener los precios de la nueva lista para dar una respuesta inmediata
    precios = obtener_precios_control(monedas)

    # 5. Construir y enviar el mensaje de confirmaci√≥n
    if precios:
        # Mensaje 3a: √âxito con precios disponibles
        encabezado_base = _("‚úÖ *Tu lista de monedas ha sido guardada.*\n\nPrecios actuales:\n", user_id)
        mensaje_respuesta = encabezado_base
        
        # Etiqueta 4: 'No encontrado'
        etiqueta_no_encontrado = _("No encontrado", user_id)
        
        for moneda in monedas:
            precio_actual = precios.get(moneda)
            if precio_actual:
                mensaje_respuesta += f"*{moneda}/USD*: ${precio_actual:,.4f}\n"
            else:
                mensaje_respuesta += f"*{moneda}/USD*: {etiqueta_no_encontrado}\n"
    else:
        # Mensaje 3b: √âxito sin precios disponibles
        mensaje_respuesta = _("‚úÖ *Tu lista de monedas ha sido guardada*, pero no pude obtener los precios en este momento.", user_id)

    await update.message.reply_text(mensaje_respuesta, parse_mode=ParseMode.MARKDOWN)

# COMANDO /hbdalerts para activar/desactivar alertas de HBD
async def hbd_alerts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra el estado de las alertas HBD y permite al usuario activarlas/desactivarlas."""
    user_id = update.effective_user.id
    usuarios = cargar_usuarios()
    user_data = usuarios.get(str(user_id), {})

    # Se asume True si la clave no existe (para usuarios antiguos)
    is_enabled = user_data.get('hbd_alerts', True)

    if is_enabled:
        # Mensaje 1: Alertas activadas
        text = _(
            "‚úÖ Tus alertas predefinidas de HBD est√°n *ACTIVADAS*.",
            user_id
        )
        # Bot√≥n 1: Desactivar
        button_text = _(
            "üîï Desactivar alertas",
            user_id
        )
    else:
        # Mensaje 2: Alertas desactivadas
        text = _(
            "‚òëÔ∏è Tus alertas predefinidas de HBD est√°n *DESACTIVADAS*.",
            user_id
        )
        # Bot√≥n 2: Activar
        button_text = _(
            "üîî Activar alertas",
            user_id
        )

    # Reutilizamos el mismo callback_data para no tener que crear un nuevo handler
    keyboard = [[
        InlineKeyboardButton(button_text, callback_data="toggle_hbd_alerts")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

# Callback para el bot√≥n de activar/desactivar alertas de HBD
async def toggle_hbd_alerts_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja el callback del bot√≥n para activar/desactivar las alertas de HBD."""
    query = update.callback_query
    await query.answer() 

    user_id = query.from_user.id
    new_status = toggle_hbd_alert_status(user_id) # Cambia el estado y obtiene el nuevo

    if new_status:
        # Mensaje 1: Activado
        text = _(
            "‚úÖ ¬°Alertas de HBD *activadas*! Volver√°s a recibir notificaciones.",
            user_id
        )
        # Bot√≥n 1: Desactivar
        button_text = _(
            "üîï Desactivar estas alertas",
            user_id
        )
    else:
        # Mensaje 2: Desactivado
        text = _(
            "‚òëÔ∏è Alertas de HBD *desactivadas*. Ya no recibir√°s estos mensajes.",
            user_id
        )
        # Bot√≥n 2: Activar
        button_text = _(
            "üîî Activar alertas de HBD",
            user_id
        )

    # Actualiza el mensaje original con el nuevo texto y el nuevo bot√≥n
    keyboard = [[
        InlineKeyboardButton(button_text, callback_data="toggle_hbd_alerts")
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

# COMANDO /lang para cambiar el idioma
async def lang_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Muestra el men√∫ para cambiar el idioma."""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    current_lang = get_user_language(user_id)

    # Usamos la traducci√≥n para el texto de introducci√≥n
    # Mensaje 1: Introducci√≥n al men√∫ de idiomas
    text = _(
        "üåê *Selecciona tu idioma:*\n\n"
        "El idioma actual es: {current_lang_name}",
        user_id
    ).format(current_lang_name=SUPPORTED_LANGUAGES.get(current_lang, 'N/A'))

    keyboard = []
    for code, name in SUPPORTED_LANGUAGES.items():
        keyboard.append([InlineKeyboardButton(
            name + (' ‚úÖ' if code == current_lang else ''), 
            callback_data=f"set_lang_{code}"
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

# CALLBACK para cambiar el idioma
async def set_language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    lang_code = query.data.split("set_lang_")[1]

    if lang_code in SUPPORTED_LANGUAGES:
        set_user_language(user_id, lang_code)

        # Recarga el traductor para el nuevo idioma ANTES de generar el mensaje

        # Mensaje 1: √âxito (requiere formateo)
        new_text = _(
            "‚úÖ ¬°Idioma cambiado a **{new_lang_name}**!\n"
            "Usa el comando /lang si deseas cambiarlo de nuevo.",
            user_id
        ).format(new_lang_name=SUPPORTED_LANGUAGES[lang_code])

        await query.edit_message_text(new_text, parse_mode=ParseMode.MARKDOWN)
    else:
        # Mensaje 2: Error
        await query.edit_message_text(
            _(
                "‚ö†Ô∏è Idioma no soportado.", 
                user_id
            ), 
            parse_mode=ParseMode.MARKDOWN
        )